package io.composeflow.model.project.appassets

import com.squareup.kotlinpoet.ClassName
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.FunSpec
import com.squareup.kotlinpoet.KModifier
import com.squareup.kotlinpoet.ParameterSpec
import com.squareup.kotlinpoet.TypeSpec
import io.composeflow.android.generateAndroidManifestXml
import io.composeflow.android.generateIOSInfoPlistXml
import io.composeflow.cloud.storage.BlobInfoWrapper
import io.composeflow.kotlinpoet.BaseDirectory
import io.composeflow.kotlinpoet.FileSpecWithDirectory
import io.composeflow.model.project.Project
import io.composeflow.platform.getAssetCacheFileFor
import kotlinx.serialization.Serializable

@Serializable
data class AppAssetHolder(
    val splashScreenInfoHolder: SplashScreenInfoHolder = SplashScreenInfoHolder(),
) {
    fun getAssetFiles(): List<BlobInfoWrapper> =
        listOf(
            splashScreenInfoHolder.androidSplashScreenImageBlobInfo.value,
            splashScreenInfoHolder.iOSSplashScreenImageBlobInfo.value,
        ).mapNotNull {
            it
        }

    fun generateCode(project: Project): List<FileSpecWithDirectory> {
        val isAndroidSplashScreenEnabled = splashScreenInfoHolder.isAndroidSplashScreenEnabled()

        // Build MainActivity using proper KotlinPoet builders
        val mainActivityClass = buildMainActivityClass(isAndroidSplashScreenEnabled)
        val mainActivityFileSpec =
            FileSpec
                .builder(
                    packageName = project.packageName,
                    fileName = "MainActivity",
                ).addImport("MainView", "")
                .addImport("android.os", "Bundle")
                .addImport("androidx.activity", "ComponentActivity")
                .addImport("androidx.activity.compose", "setContent")
                .addImport("androidx.activity", "enableEdgeToEdge")
                .addImport("moe.tlaster.precompose", "PreComposeApp")
                .apply {
                    if (isAndroidSplashScreenEnabled) {
                        addImport(
                            "androidx.core.splashscreen.SplashScreen.Companion",
                            "installSplashScreen",
                        )
                    }
                }.addType(mainActivityClass)
                .build()

        val mainActivityFileSpecWithDirectory =
            FileSpecWithDirectory(
                fileSpec = mainActivityFileSpec,
                baseDirectory = BaseDirectory.AndroidMainKotlin,
            )

        return listOf(mainActivityFileSpecWithDirectory)
    }

    /**
     * Generates XML files for app assets (splash screen, AndroidManifest, etc.).
     * Returns a map where:
     * - Key: destination path relative to project root
     * - Value: XML content to write
     */
    fun generateXmlFiles(): Map<String, String> {
        val result = mutableMapOf<String, String>()

        // Add splash screen XML files (includes both Android and iOS files)
        result.putAll(splashScreenInfoHolder.generateXmlFiles())

        // Add AndroidManifest.xml
        val isAndroidSplashScreenEnabled = splashScreenInfoHolder.isAndroidSplashScreenEnabled()
        val androidManifestXml =
            generateAndroidManifestXml(isSplashScreenEnabled = isAndroidSplashScreenEnabled)
        result["composeApp/src/androidMain/AndroidManifest.xml"] = androidManifestXml

        // Add iOS Info.plist with splash screen configuration
        val isIOSSplashScreenEnabled = splashScreenInfoHolder.isIOSSplashScreenEnabled()
        val iosInfoPlistXml = generateIOSInfoPlistXml(isSplashScreenEnabled = isIOSSplashScreenEnabled)
        result["iosApp/iosApp/Info.plist"] = iosInfoPlistXml

        return result
    }

    /**
     * Generates copy local file instructions for app asset files (splash screen images, etc.).
     * Returns a map where:
     * - Key: source file path (cache file location)
     * - Value: destination path relative to project root
     */
    fun generateCopyLocalFileInstructions(
        userId: String,
        projectId: String,
    ): Map<String, String> {
        val result = mutableMapOf<String, String>()

        // Add Android splash screen image if enabled
        // Note: The vector drawable XML is generated by generateXmlFiles()
        // Here we copy the actual image file to drawable-nodpi for the splash screen to reference
        splashScreenInfoHolder.androidSplashScreenImageBlobInfo.value?.let { blobInfo ->
            val cacheFile =
                getAssetCacheFileFor(
                    userId = userId,
                    projectId = projectId,
                    blobInfoWrapper = blobInfo,
                )
            // Extract file extension from the original file name
            val fileExtension = blobInfo.fileName.substringAfterLast(".", "png")
            // Copy the actual image file to drawable-nodpi directory
            result[cacheFile.path] =
                "composeApp/src/androidMain/res/drawable-nodpi/${io.composeflow.model.project.appassets.ANDROID_IC_SPLASH_IMAGE}_actual.$fileExtension"
        }

        // Add iOS splash screen image if present
        splashScreenInfoHolder.iOSSplashScreenImageBlobInfo.value?.let { blobInfo ->
            val cacheFile =
                getAssetCacheFileFor(
                    userId = userId,
                    projectId = projectId,
                    blobInfoWrapper = blobInfo,
                )
            // iOS splash screen images typically go in different locations
            result[cacheFile.path] = "iosApp/iosApp/Assets.xcassets/SplashImage.imageset/${blobInfo.fileName}"
        }

        return result
    }

    private fun buildMainActivityClass(isAndroidSplashScreenEnabled: Boolean): TypeSpec {
        val onCreateMethod =
            FunSpec
                .builder("onCreate")
                .addModifiers(KModifier.OVERRIDE)
                .addParameter(
                    ParameterSpec
                        .builder(
                            "savedInstanceState",
                            ClassName("android.os", "Bundle").copy(nullable = true),
                        ).build(),
                ).addStatement("super.onCreate(savedInstanceState)")
                .apply {
                    if (isAndroidSplashScreenEnabled) {
                        addStatement("installSplashScreen()")
                    }
                }.addStatement("enableEdgeToEdge()")
                .addStatement(
                    """
                    setContent {
                        PreComposeApp {
                            MainView()
                        }
                    }
                    """.trimIndent(),
                ).build()

        return TypeSpec
            .classBuilder("MainActivity")
            .superclass(ClassName("androidx.activity", "ComponentActivity"))
            .addFunction(onCreateMethod)
            .build()
    }
}

fun AppAssetHolder.copyContents(other: AppAssetHolder) {
    splashScreenInfoHolder.copyContents(other.splashScreenInfoHolder)
}
